// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "vertexVersionCentroid.h"
#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

/* Workaround for https://bugs.mojang.com/browse/MCPE-40059 */
#if defined(MCPE40059)
varying POS4 worldPos;
varying float cameraDist; /* Normalized camera distance being 1.0 at
						   * the point where the far terrain fog
						   * ends. */
varying float desatFactor;
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"
#include "natural-mystic-config.h"
#include "natural-mystic-fog.h"
#include "natural-mystic-hacks.h"
#include "natural-mystic-light.h"
#include "natural-mystic-noise.h"

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

highp float waterWave(highp vec3 wPos, highp float time) {
	highp vec2 resolution = vec2(7.0, 1.6);
	highp vec2  st    = wPos.xz / resolution;
	highp float tSlow = time / 1.5;
	highp vec2  st1   = st + tSlow * vec2( 0.5,  1.0);
	highp vec2  st2   = st + tSlow * vec2(-0.4, -1.0);

	highp float wave1  = perlinNoise(st1) * 2.0 - 1.0;
	highp float wave2  = perlinNoise(st2) * 2.0 - 1.0;
	highp float wave3  = wave1 + wave2 * 0.9;
	highp float wave4  = wave3 * 0.5;
	highp float interp = sin(TIME * 5.0 - 2.1 * wPos.x - 1.4 * wPos.z + wPos.y);

	return mix(wave3, wave4, interp) + interp * 0.5;
}

vec4 waterColor(vec4 baseColor, vec3 ambient, highp vec3 relPos, highp float wave) {
	/* We want to know the angle between the normal of the water plane
	 * (or anything rendered similarly to water) and the camera. Note
	 * that we assume the surface normal is always (0, 1, 0) and the
	 * assumption can be wrong! When in doubt never use this
	 * function. */
	const highp vec3 surfNorm = vec3(0.0, 1.0, 0.0);
	highp float cosTheta = abs(dot(surfNorm, normalize(-relPos))); // [0, 1]

	/* Use the angle to calculate the color of surface. The more steep
	 * the angle is, the less intensity of the supecular light will
	 * be. And we also use the angle to determine the opacity, that
	 * is, when the angle is wide the water plane behaves more like a
	 * mirror than air.
	 */
	float opacity   = baseColor.a;
	float lightness = 1.0 - baseColor.a;
	vec4 surfColor  = vec4(baseColor.rgb, min(1.0, baseColor.a * 8.0));
	vec4 nearColor  = vec4(baseColor.rgb * lightness, opacity);

	/* Simulate the specular light. THINKME: Do a proper normal
	 * mapping, possibly by calculating the derivation of the wave
	 * function. Dunno if it's worth it tho. */
	vec3 lightDelta = ambient * wave;
	surfColor.rgb = max(surfColor.rgb, min(vec3(1.0), surfColor.rgb + lightDelta * 0.20));
	nearColor.rgb = max(nearColor.rgb, min(vec3(1.0), nearColor.rgb + lightDelta * 0.03));

	return mix(surfColor, nearColor, cosTheta);
}

void main()
{
#if !defined(MCPE40059)
    POS4 worldPos;
	float cameraDist;
#endif
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
#endif

///// find distance from the camera
	vec3 relPos = -worldPos.xyz;
	float cameraDepth = length(relPos);
	cameraDist = cameraDepth / RENDER_DISTANCE;

	/* Reduce the contrast of far objects (#5). The overall color
	 * should lean towards the ambient. */
#if defined(FANCY) && defined(MCPE40059)
	desatFactor = exponentialFog(vec2(0.0, 4.0), cameraDist);
#endif

///// apply fog

#ifdef FOG
	float len = cameraDist;
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif

    fogColor.rgb = FOG_COLOR.rgb;
#  if defined(FOG_TYPE)
#    if FOG_TYPE == FOG_TYPE_LINEAR
	fogColor.a = linearFog(FOG_CONTROL, len);
#    elif FOG_TYPE == FOG_TYPE_EXP
	fogColor.a = exponentialFog(FOG_CONTROL, len);
#    elif FOG_TYPE == FOG_TYPE_EXP2
	fogColor.a = exponentialSquaredFog(FOG_CONTROL, len);
#    endif
#  else
	fogColor.a = 0.0; /* Fog disabled? Really?? */
#  endif /* defined(FOG_TYPE) */
#endif /* FOG */

	/* Waves */
#if !defined(BYPASS_PIXEL_SHADER) && defined(ENABLE_WAVES)
	if (isLeaf(color)) {
		POS3 posw = POSITION.xyz;
		highp float wave = sin(TIME * 3.5 + 2.0 * posw.x + 2.0 * posw.z + posw.y);
		gl_Position.x += wave * 0.015;
	}
	else if (isWater(color)) {
		/* THINKME: In theory this should be the position of the
		 * vertex in the world coordinates without getting affected by
		 * the view position, but actually it's not working as
		 * expected. I don't know why. (#36) */
		POS3 posw = worldPos.xyz + VIEW_POS;

		/* We want water to swell in proportion to its volume. The more
		 * the vertex is close to the ground (i.e. integral points in the
		 * world position), the less the vertex should swell. Without this
		 * tweak the water will leave the ground a bit. */
		highp float wave   = 0.0;
		highp float volume = fract(POSITION.y);
		if (volume > 0.0) {
			wave = waterWave(posw, TIME);
			gl_Position.y += wave * 0.08 * volume;
		}

#  if defined(FANCY)
		/* When we know the surface norm we can do something advanced. */
		if (isWaterPlane(POSITION)) {
			/* THINKME: The color of the ambient light can only be
			 * calculated accurately in the fragment shader. */
#if defined(FOG)
			vec3 ambient = ambientLightColor(fogColor);
#else
			vec3 ambient = ambientLightColor(1.0, 1.0);
#endif
			/* Reduce the base opacity here. We are going to increase it
			 * depending on the angle between the water plane and the
			 * camera.
			 */
			color.a *= 0.25;
			color = waterColor(color, ambient, relPos, wave);
		}
		else {
			color.a *= 0.5;
		}
#  endif
	}
#endif

///// blended layer (mostly water) magic
#ifdef BLEND
	//Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	//to fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
		#else
			// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
		#endif //FANCY

		float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		color.a = mix(color.a, 1.0, alphaFadeOut);
	}
#endif

#ifndef BYPASS_PIXEL_SHADER
	#ifndef FOG
		// If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * 0.000001;
	#endif
#endif
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: t
// End:
